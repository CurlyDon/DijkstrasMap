'''
Donovan Colo, 12/10/2021, Design and Analysis of Algorithms
This program was designed to make a graph and implement Dijkstras algorithm.
I acquired some code as listed below to help execute the algorithm properly.
Once the proper graph was formed, the weight graph was then determined starting at
the beginning point and reaching out to every point while noting every vertex hit.
This was then passed to a print method. All data was obtained through the "Place.txt" and
"Road.txt" files.
'''

import heapq

# https://bradfieldcs.com/algos/graphs/dijkstras-algorithm/
# Mild changes were made to incorporate what our assignment asked for
def calculate_distances(graph, starting_vertex):
    distances = {vertex: float('infinity') for vertex in graph}
    previous_neighbor = {vertex: "" for vertex in graph}
    distances[starting_vertex] = 0
    pq = [(0, starting_vertex)]


    while len(pq) > 0:
        current_distance, current_vertex = heapq.heappop(pq)


        # Nodes can get added to the priority queue multiple times. We only
        # process a vertex the first time we remove it from the priority queue.
        if current_distance > distances[current_vertex]:
            continue

        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight
            # Only consider this new path if it's better than any path we've
            # already found.
            if distance < distances[neighbor]:
                previous_neighbor[str(neighbor)] = current_vertex
                distances[neighbor] = distance
                heapq.heappush(pq, (distance, neighbor))

    return distances,previous_neighbor
    #returns the minimum distances and the previous neighbor of every vertice to get that node from the begining node

def findThePath(neigh, start, current, path):
    #this method builds the path from the beginning to the end
    next_point = neigh[str(current)]
    if(neigh[current] != start):
        #checks to make sure it isnt at the beginning
        findThePath(neigh, start, next_point, path)
        #recures through the method to find the path
    path.append(neigh[current])

    return path #returns the path


def open_roads():
    # Opens file to be read to get data
    randoms = {}
    max_vert = -1
    with open("Road.txt", 'r') as f:

        # Read all of the lines into a list
        lines = f.readlines()

        # Grab the maximum vertice in the road map
        for x in lines:
            values = x.split(",")
            if int(values[0]) > max_vert:
                max_vert = int(values[1])
            if int(values[1]) > max_vert:
                max_vert = int(values[1])

        # Make a list the size of the vertices
        graph = {}
        for x in range(max_vert+1):
            graph[str(x)] = {}
            randoms[str(x)] = {}

        # Loop through all of the lines and fill in graph
        for x in lines:
            values = x.split(',')
            a = values[0]
            b = values[1]
            if values[3] == '\n':
                values[3] = " "
            values[3] = values[3].strip()
            graph[a][str(b)] = float(values[2])
            graph[b][str(a)] = float(values[2])
            randoms[a][str(b)] = values[3]
            randoms[b][str(a)] = values[3]

        return graph,randoms


def open_place():
    places = {}
    vertices={}
    #creates dictionaries so call the appropriate data
    with open("Place.txt", 'r') as f:
        lines = f.readlines()
        #reads every line appropriately and splits the data
        for x in lines:
            values = x.split(',')
            key = values[1].strip()
            data = values[0].strip()
            places[key] = data
            vertices[data] = key
    #returns the two dictionaries with keys and data swapped for obtaining purposes
    return places,vertices

def printPath(path,graph,vertices, random):
    for i in range(len(path)):
        #recurs only through the length of the path
        if(i+1 < len(path)):
            #checks to see if the path value is in the vertice to label properly
            if str(path[i]) in vertices:
                pass
            else:
                vertices[str(path[i])]= 'null'
            if str(path[i+1]) in vertices:
                pass
            else:
                vertices[str(path[i+1])]= 'null'

            next = path[i]
            #prints each step properly
            print('\t' + str(i+1)+': ' + str(path[i]) +"("+vertices[str(path[i])]+")"+
                  " ---> " + str(path[i+1]+"("+vertices[str(path[i+1])]+")"+ ", "
                  + str(random[str(path[i+1])][str(next)]) + ', '
                  + str(graph[str(path[i+1])][str(next)])+" mi"))
def main():
    #use of try, except to catch if two places are not able to get to each other
    try:
        start = input('Enter the Source Name:\n')
        finish = input('Enter the Destination Name:\n')
        #gets input
        example_graph, random = open_roads()
        #gets the data for the graph and notes the random data from "Road.txt"
        all_places,vertices = open_place()
        #gets the data from "Place.txt"
        begin = all_places[start]
        end = all_places[finish]
        #finds beginning and end vertices
        listOfDistances, neighbors = calculate_distances(example_graph, begin)
        #gets the list of every distance to every node, and teh neighbors to get to those nodes
        path = findThePath(neighbors, begin, end, [])
        #finds the path from start to end
        path.append(end)
        #adds end to the path
        print("Searching from",  begin+"("+start+")", "to", end+"("+finish+")")
        printPath(path,example_graph,vertices,random)
        print("It takes", listOfDistances[end], "miles from", begin + "(" + start + ")", "to", end + "(" + finish + ").")
    except KeyError:
        print("It is impossible to get from", begin + "(" + start + ")", "to", end + "(" + finish + ").")


if __name__ == '__main__':
    main()

